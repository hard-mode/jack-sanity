{"name":"Jack-sanity","tagline":"Simple NodeJS scripting for jackdbus.","body":"## Install\r\n\r\nYou'll need to clone this repository and then run `npm install`, then you can symlink `bin/jack-sanity` to somewhere in your path.\r\n\r\n\r\n## Usage\r\n\r\nCreate a new `config.js' file and save it into the `config` directory, next you'll want to listen to some of the events (see documentation below for details):\r\n\r\n\r\n```js\r\n// Wait for a client to start:\r\nPatchbay.on('your-client.appeared', function(client) {\r\n\t// And connect its output to the system playback:\r\n\tclient.connectOutput('system');\r\n});\r\n```\r\nIn some situations it is important to trigger these events when Sanity starts, thankfully there's a utility function to let you do so:\r\n\r\n```js\r\n// The session has begun:\r\nPatchbay.on('ready', function() {\r\n\t// Trigger the 'appeared' event for 'your-client' if it is running:\r\n\tPatchbay.simulateClient('your-client');\r\n});\r\n```\r\n\r\n\r\n## Documentation\r\n### Patchbay.findPort\r\nFind a currently running client by its name.\r\n\r\n```js\r\nPatchbay.findClient('full-client-name');\r\nPatchbay.findClient(/partial-client-name/i);\r\n```\r\n\r\n#### Parameters\r\n* `clientName` a `String` or `RegExp` to search with.\r\n* `callback` a `Function` that will be called when and if a\r\nclient is found.\r\n\r\n#### Returns\r\n* The `Client` that was found.\r\n* Or `false` when no client was found.\r\n\r\n\r\n### Patchbay.findPort\r\nFind a currently running port by its client and port names.\r\n\r\n```js\r\nPatchbay.findPort('client', 'event-out');\r\nPatchbay.findPort('client', /_[lr12]/i);\r\n```\r\n\r\n#### Parameters\r\n* `clientName` a `String` or `RegExp` to search with.\r\n* `portName` a `String` or `RegExp` to search with.\r\n* `callback` a `Function` that will be called when and if a port is found.\r\n\r\n#### Returns\r\n* The `Port` that was found.\r\n* Or `false` when no port was found.\r\n\r\n\r\n### Patchbay.simulateClient\r\nTrigger a client-appeared event for the named client.\r\n\r\n```js\r\nPatchbay.simulateClient('full-client-name');\r\nPatchbay.simulateClient(/partial-client-name/i);\r\n```\r\n\r\n#### Parameters\r\n* `clientName` a `String` or `RegExp` to search with.\r\n\r\n#### Returns\r\n* The `Client` client the event was triggered for.\r\n* Or `false` when no port was found.\r\n\r\n\r\n### Patchbay.on\r\nAdd an event listener to the `Patchbay`.\r\n\r\n#### Events\r\n##### client-appeared or {client-name}.client-appeared\r\nTriggered when a client joins the session.\r\n\r\n##### client-disappeared or {client-name}.client-disappeared\r\nTriggered when a client leaves the session.\r\n\r\n##### port-appeared or {client-name}.port-appeared\r\nTriggered when a port or a port belonging to the client joins the session.\r\n\r\n##### port-disappeared or {client-name}.port-disappeared\r\nTriggered when a port or a port belonging to the client leaves the session.\r\n\r\n##### {client-name}.appeared\r\nTriggered when a client or port belonging to a client joins the session.\r\n\r\n##### {client-name}.disappeared\r\nTriggered when a client or port belonging to a client leaves the session.\r\n\r\n\r\n### Client.chainOutput\r\nConnect one or more clients in a row to the current client output.\r\n\r\n```js\r\nPatchbay\r\n\t.findClient('example')\r\n\t.chainOutput('effects-chain', 'system');\r\n```\r\n\r\nThis would result in client 'example' outputs being linked to the\r\ninputs of client 'effects-chain', whos outputs would then be linked\r\nto the inputs for 'system'.\r\n\r\n#### Parameters\r\n* One or more of `clientName`; a `String` or `RegExp` to search with,\r\nor `Client` to connect to a client you have previously searched for.\r\n\r\n#### Returns\r\n* The `Client` that started the chain.\r\n\r\n\r\n#### Client.connectInput\r\nConnect one or more clients as inputs to the current client.\r\n\r\n```js\r\nPatchbay\r\n\t.findClient('example')\r\n\t.connectInput('system');\r\n```\r\n\r\n#### Parameters\r\n* One or more of `clientName`; a `String` or `RegExp` to search with,\r\nor `Client` to connect to a client you have previously searched for.\r\n\r\n#### Returns\r\n* The current `Client`.\r\n\r\n\r\n### Client.connectOutput\r\nConnect one or more clients to receive outputs from the current client.\r\n\r\n```js\r\nPatchbay\r\n\t.findClient('example')\r\n\t.connectOutput('system');\r\n```\r\n\r\n#### Parameters\r\n* One or more of `clientName`; a `String` or `RegExp` to search with,\r\nor `Client` to connect to a client you have previously searched for.\r\n\r\n#### Returns\r\n* The current `Client`.\r\n\r\n\r\n### Client.disconnectAll\r\n### Client.disconnectAllInputs\r\n### Client.disconnectAllOutputs\r\nDisconnect all inputs and outputs from the current client.\r\n\r\n```js\r\nPatchbay\r\n\t.findClient('example')\r\n\t.disconnectAll();\r\n```\r\n\r\n#### Returns\r\n* The current `Client`.\r\n\r\n\r\n### Client.disconnectInput\r\nDisconnect one or more client outputs from the current clients input.\r\n\r\n```js\r\nPatchbay\r\n\t.findClient('example')\r\n\t.disconnectInput('system');\r\n```\r\n\r\n#### Parameters\r\n* One or more of `clientName`; a `String` or `RegExp` to search with,\r\nor `Client` to disconnect to a client you have previously searched for.\r\n\r\n#### Returns\r\n* The current `Client`.\r\n\r\n\r\n### Client.disconnectOutput\r\nDisconnect one or more client inputs from the current clients output.\r\n\r\n```js\r\nPatchbay\r\n\t.findClient('example')\r\n\t.disconnectOutput('system');\r\n```\r\n\r\n#### Parameters\r\n* One or more of `clientName`; a `String` or `RegExp` to search with,\r\nor `Client` to disconnect to a client you have previously searched for.\r\n\r\n#### Returns\r\n* The current `Client`.\r\n\r\n\r\n### Client.getConnections\r\nGets a list of clients connected to the current client.\r\n\r\n```js\r\nPatchbay\r\n\t.findClient('example')\r\n\t.getConnections();\r\n```\r\n\r\n#### Returns\r\n* The connected `Client`s in an `Array`.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}