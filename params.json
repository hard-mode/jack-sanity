{"name":"Jack Sanity","tagline":"A scriptable environment for controlling jackdbus clients.","body":"## Install\r\n\r\nYou'll need to clone this repository and then run `npm install`, then you can symlink `bin/jack-sanity` to somewhere in your path.\r\n\r\n\r\n## Usage\r\n\r\nCreate a new JavaScript file and save it somewhere handy, this will be your session configuration file. You can use it to watch JACK clients and ports:\r\n\r\n```js\r\nvar hardware = session.createClient('system'),\r\n\teffects = session.createClient('my-effects');\r\n\r\neffects.on('online', function() {\r\n\t// Auto-connect a client to the hardware output:\r\n\teffects.connect(hardware);\r\n});\r\n```\r\n\r\nYou can also start and stop processes:\r\n\r\n```js\r\nvar effectsHost = session.createProcess('calfjackhost', [\r\n\t'--client', 'my-effects'\r\n]);\r\n\r\nsession.on('open', function() {\r\n\t// Start the effects host when the session opens:\r\n\teffectsHost.open();\r\n});\r\n\r\nsession.on('close', function() {\r\n\t// Stop the effects host when the session closes:\r\n\teffectsHost.close();\r\n});\r\n\r\neffectsHost.on('close', function() {\r\n\t// Restart the effects host when it closes (or crashes):\r\n\teffectsHost.open();\r\n});\r\n```\r\n\r\nTo make life easier, you can combine the client and the process under one name:\r\n\r\n```js\r\nvar effects = session.combine(\r\n\tsession.createClient('my-effects'),\r\n\tsession.createProcess('calfjackhost', [\r\n\t\t'--client', 'my-effects'\r\n\t])\r\n);\r\n\r\nsession.on('open', function() {\r\n\t// Start the effects host when the session opens:\r\n\teffects.open();\r\n\r\n\t// Connect the effects:\r\n\tif (effects.canConnect(hardware)) {\r\n\t\teffects.connect(hardware);\r\n\t}\r\n});\r\n```\r\n\r\nYou can also log events to the terminal:\r\n\r\n```js\r\nsession.on('open', function() {\r\n\tlog('Session is ready...');\r\n});\r\n\r\nsession.on('close', function() {\r\n\tlog('Session closed.');\r\n});\r\n```\r\n\r\nTo start your session simply run:\r\n\r\n```bash\r\njack-sanity --config yoursession.js\r\n```\r\n\r\nThe configuration file will be monitored for changes and then restart your session.\r\n\r\n\r\n## Documentation\r\n### Session.createClient\r\nCreate an interface to a matching set of jack clients, even if they do not currently exist in the session. See `Client.isOnline`.\r\n\r\n```js\r\n// Specify an exact client name:\r\nsession.createClient('system');\r\n\r\n// Use regular expressions to match a client name:\r\nsession.createClient(/calf/i);\r\n```\r\n\r\n#### Parameters\r\n* `clientName` a `String` or `RegExp` to search with.\r\n\r\n#### Returns\r\n* An instance of `Client`.\r\n\r\n\r\n### Session.createPort\r\nCreate an interface to a set of matching jack ports, even if they do not currently exist in the session. See `Client.isOnline` and `Port.isOnline`.\r\n\r\n```js\r\n// Specify an exact port name:\r\nsession.createPort('my-client', 'event-out');\r\n\r\n// Use regular expressions to match a port name:\r\nsession.createPort('my-client', /_[lr12]/i);\r\n```\r\n\r\n#### Parameters\r\n* `clientName` a `String` or `RegExp` to search with.\r\n* `portName` a `String` or `RegExp` to search with.\r\n\r\n#### Returns\r\n* An instance of `Port`.\r\n\r\n\r\n### Session.createProcess\r\nCreate a process definition that can be started and stopped as needed.\r\n\r\n```js\r\n// Specify an exact port name:\r\nsession.createPort('my-client', 'event-out');\r\n\r\n// Use regular expressions to match a port name:\r\nsession.createPort('my-client', /_[lr12]/i);\r\n```\r\n\r\n#### Parameters\r\n* `command` a `String` of the name of the command to execute.\r\n* `args` an array of arguments to be passed to the function.\r\n\r\n#### Returns\r\n* An instance of `Process`.\r\n\r\n\r\n### Session.combine\r\nCombine the functions and events of two or more `Client`, `Process` or `Port` instances into one object.\r\n\r\n```js\r\nsession.combine(\r\n\tsession.createClient('my-client'),\r\n\tsession.createProcess('calfjackhost', [\r\n\t\t'--client', 'my-client'\r\n\t])\r\n);\r\n```\r\n\r\n#### Parameters\r\n* One or more `Client` or `Port` to connect to.\r\n\r\n#### Returns\r\n* A new object.\r\n\r\n\r\n### Session.on\r\nAdd an event listener to the `session`. For complete documentation of event functions see the [EventEmitter2](https://github.com/asyncly/EventEmitter2) documentation.\r\n\r\n#### Events\r\n##### open\r\nTriggered when the session opens for the first time, or after a configuration change.\r\n\r\n##### close\r\nTriggered when the session is about to close.\r\n\r\n\r\n### Client.createPort\r\nCreate an interface to a set of matching jack ports, even if they do not currently exist in the session. See `Port.isOnline`.\r\n\r\n```js\r\nsession.createClient('my-client')\r\n\t.createPort('event-out');\r\n```\r\n\r\n#### Parameters\r\n* `portName` a `String` or `RegExp` to search with.\r\n\r\n#### Returns\r\n* An instance of `Port`.\r\n\r\n\r\n### Client.canConnect\r\nCheck to see if a client can successfully connect its outputs to the inputs of another client.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.canConnect(session.createClient('client-2'));\r\n```\r\n\r\n#### Parameters\r\n* `client`; a `Client` or `Port` to connect to.\r\n\r\n#### Returns\r\n* Either `true` or `false` depending on success.\r\n\r\n\r\n### Client.connect\r\nConnect the outputs of a client to the inputs of another client.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.connect(session.createClient('client-2'));\r\n```\r\n\r\n#### Parameters\r\n* `client`; a `Client` or `Port` to connect to.\r\n\r\n#### Returns\r\n* Either `true` or `false` depending on success.\r\n\r\n\r\n### Client.disconnect\r\nDisconnect the outputs of a client from the inputs of another port.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.disconnect(session.createClient('client-2'));\r\n```\r\n\r\n#### Returns\r\n* Either `true` or `false` depending on success.\r\n\r\n\r\n### Client.isOnline\r\nCheck to see if a client is currently online and available.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.isOnline();\r\n```\r\n\r\n#### Returns\r\n* For online `true`.\r\n* Or for offline `false`.\r\n\r\n\r\n### Client.on\r\nAdd an event listener to a client. For complete documentation of event functions see the [EventEmitter2](https://github.com/asyncly/EventEmitter2) documentation.\r\n\r\n#### Events\r\n##### online\r\nTriggered when the client goes online.\r\n\r\n##### offline\r\nTriggered when the client goes offline.\r\n\r\n\r\n### Port.canConnect\r\nCheck to see if a port can successfully connect its outputs to the inputs of another port.\r\n\r\n```js\r\nsession.createPort('client-1', 'out')\r\n\t.canConnect(session.createPort('client-2', 'in'));\r\n```\r\n\r\n#### Parameters\r\n* `client`; a `Client` or `Port` to connect to.\r\n\r\n#### Returns\r\n* Either `true` or `false` depending on success.\r\n\r\n\r\n### Port.connect\r\nConnect the outputs of a port to the inputs of another port.\r\n\r\n```js\r\nsession.createPort('client-1', 'out')\r\n\t.connect(session.createPort('client-2', 'in'));\r\n```\r\n\r\n#### Parameters\r\n* `client`; a `Client` or `Port` to connect to.\r\n\r\n#### Returns\r\n* Either `true` or `false` depending on success.\r\n\r\n\r\n### Port.disconnect\r\nDisconnect the outputs of a port from the inputs of another port.\r\n\r\n```js\r\nsession.createPort('client-1', 'out')\r\n\t.disconnect(session.createPort('client-2', 'in'));\r\n```\r\n\r\n#### Returns\r\n* Either `true` or `false` depending on success.\r\n\r\n\r\n### Port.isOnline\r\nCheck to see if a client is currently online and available.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.isOnline();\r\n```\r\n\r\n#### Returns\r\n* For online `true`.\r\n* Or for offline `false`.\r\n\r\n\r\n### Port.on\r\nAdd an event listener to a port. For complete documentation of event functions see the [EventEmitter2](https://github.com/asyncly/EventEmitter2) documentation.\r\n\r\n#### Events\r\n##### online\r\nTriggered when the port goes online.\r\n\r\n##### offline\r\nTriggered when the port goes offline.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}