{"name":"Jack Sanity","tagline":"A scriptable environment for controlling jackdbus clients.","body":"## Install\r\n### Arch Linux\r\n\r\nArch Linux users can install Jack Sanity [from the Arch User Repository](https://aur.archlinux.org/packages/jack-sanity-git/). For more information about using the AUR see the [Arch Linux Wiki](https://wiki.archlinux.org/index.php/Arch_User_Repository).\r\n\r\n\r\n### From source\r\n\r\n1. Clone the repository using git, or [download the latest archive](https://github.com/psychoticmeow/jack-sanity/archive/master.zip) and extract it somewhere convenient.\r\n2. Inside the created folder run `npm install` to install all of the required libraries.\r\n3. Then symlink `bin/jack-sanity` to somewhere in your path.\r\n\r\n\r\n## Usage\r\n\r\nTo start a Jack Sanity session simply run:\r\n\r\n```bash\r\njack-sanity --config your-session.js\r\n```\r\n\r\nWhen you make changes to the configuration file, jack-sanity will close the running session and start a new one with your configuration changes.\r\n\r\n\r\n## Configuration\r\n\r\nCreate a new JavaScript file and save it somewhere handy, this will be your session configuration file. You can use it to watch JACK clients and ports:\r\n\r\n```js\r\nvar hardware = session.createClient('system'),\r\n\teffects = session.createClient('my-effects');\r\n\r\neffects.on('online', function() {\r\n\t// Auto-connect a client to the hardware output:\r\n\teffects.connect(hardware);\r\n});\r\n```\r\n\r\nYou can also start and stop processes:\r\n\r\n```js\r\nvar effectsHost = session.createProcess('calfjackhost', [\r\n\t'--client', 'my-effects'\r\n]);\r\n\r\nsession.on('open', function() {\r\n\t// Start the effects host when the session opens:\r\n\teffectsHost.open();\r\n});\r\n\r\nsession.on('close', function() {\r\n\t// Stop the effects host when the session closes:\r\n\teffectsHost.close();\r\n});\r\n\r\neffectsHost.on('close', function() {\r\n\t// Restart the effects host when it closes (or crashes):\r\n\teffectsHost.open();\r\n});\r\n```\r\n\r\nTo make life easier, you can combine the client and the process under one name:\r\n\r\n```js\r\nvar effects = session.combine(\r\n\tsession.createClient('my-effects'),\r\n\tsession.createProcess('calfjackhost', [\r\n\t\t'--client', 'my-effects'\r\n\t])\r\n);\r\n\r\nsession.on('open', function() {\r\n\t// Start the effects host when the session opens:\r\n\teffects.open();\r\n\r\n\t// Connect the effects:\r\n\tif (effects.canConnect(hardware)) {\r\n\t\teffects.connect(hardware);\r\n\t}\r\n});\r\n```\r\n\r\nYou can also log events to the terminal:\r\n\r\n```js\r\nsession.on('open', function() {\r\n\tlog('Session is ready...');\r\n});\r\n\r\nsession.on('close', function() {\r\n\tlog('Session closed.');\r\n});\r\n```\r\n\r\n\r\n## Public API\r\n\r\nThe API available within configuration scripts.\r\n\r\n### session global object\r\n#### Methods\r\n##### createClient(clientName, [portName])\r\nCreate an interface to a matching set of jack clients, even if they do not currently exist in the session. See `Client.isOnline`.\r\n\r\n* `clientName` a `String` or `RegExp` to search with.\r\n* Optionally `portName` a `String` or `RegExp` to search with.\r\n* Returns an instance of `Client`.\r\n\r\n```js\r\n// Specify an exact client name:\r\nsession.createClient('my-client');\r\n\r\n// Specify an exact port name:\r\nsession.createPort('my-client', 'event-out');\r\n\r\n// Use regular expressions to match a client name:\r\nsession.createClient(/my-client/i);\r\n\r\n// Use regular expressions to match a port name:\r\nsession.createPort('my-client', /left|right/i);\r\n```\r\n\r\n\r\n##### createProcess(command, args)\r\nCreate a process definition that can be started and stopped as needed.\r\n\r\n* `command` a `String` of the name of the command to execute.\r\n* `args` an array of arguments to be passed to the function.\r\n* Returns an instance of `Process`.\r\n\r\n```js\r\nsession.createProcess('calfjackhost', [\r\n\t'--client', 'my-client'\r\n]);\r\n```\r\n\r\n\r\n##### combine(...)\r\nCombine the functions and events of two or more `Client` and `Process` instances into one object.\r\n\r\n* One or more `Client` or `Process` to combine to.\r\n* Returns a new object.\r\n\r\n```js\r\nsession.combine(\r\n\tsession.createClient('my-client'),\r\n\tsession.createProcess('calfjackhost', [\r\n\t\t'--client', 'my-client'\r\n\t])\r\n);\r\n```\r\n\r\n\r\n#### Events\r\nFor complete documentation of event functions see the [EventEmitter2](https://github.com/asyncly/EventEmitter2) documentation.\r\n\r\n##### open\r\nTriggered when the session opens for the first time, or after a configuration change.\r\n\r\n```js\r\nsession.on('open', function() {\r\n\tlog('Studio session ready...');\r\n})\r\n```\r\n\r\n##### close\r\nTriggered when the session is about to close.\r\n\r\n```js\r\nsession.on('close', function() {\r\n\tlog('Studio session closed.');\r\n})\r\n```\r\n\r\n\r\n### Client class\r\n#### Methods\r\n#### canConnect(client)\r\nCheck to see if a client can successfully connect its outputs to the inputs of another client.\r\n\r\n* `client` a `Client` or to connect to.\r\n* Returns either `true` or `false` depending on success.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.canConnect(session.createClient('client-2'));\r\n```\r\n\r\n\r\n#### connect(client)\r\nConnect the outputs of a client to the inputs of another client.\r\n\r\n* `client` a `Client` or to connect to.\r\n* Returns either `true` or `false` depending on success.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.connect(session.createClient('client-2'));\r\n```\r\n\r\n\r\n##### createClient(portName)\r\nCreate an interface to a set of matching jack ports, even if they do not currently exist in the session. See `Client.isOnline`.\r\n\r\n* `portName` a `String` or `RegExp` to search with.\r\n* Returns an instance of `Client`.\r\n\r\n```js\r\nsession.createClient('my-client')\r\n\t.createClient('event-out');\r\n```\r\n\r\n\r\n#### disconnect(client)\r\nDisconnect the outputs of a client from the inputs of another port.\r\n\r\n* `client` a `Client` or to connect to.\r\n* Returns either `true` or `false` depending on success.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.disconnect(session.createClient('client-2'));\r\n```\r\n\r\n\r\n#### isConnected([client])\r\nCheck to see if a client is connected to any client or connected to a specific client.\r\n\r\n* Optionally `client` a `Client` to check for connections to.\r\n* Returns `true` when connected and `false` when disconnected.\r\n\r\n```js\r\n// Is the client connected to anything?\r\nsession.createClient('client-1')\r\n\t.isConnected();\r\n\r\n// Are these clients connected?\r\nsession.createClient('client-1')\r\n\t.isConnected(session.createClient('client-2'));\r\n```\r\n\r\n\r\n#### isDisonnected([client])\r\nCheck to see if a client is not connected to any client or not connected to a specific client.\r\n\r\n* Optionally `client` a `Client` to check for connections to.\r\n* Returns `true` when disconnected and `false` when connected.\r\n\r\n```js\r\n// Is the client connected to anything?\r\nsession.createClient('client-1')\r\n\t.isDisonnected();\r\n\r\n// Are these clients connected?\r\nsession.createClient('client-1')\r\n\t.isDisonnected(session.createClient('client-2'));\r\n```\r\n\r\n\r\n#### isClient(clientName)\r\nCheck to see if this `Client` handles clients of the specified name.\r\n\r\n* `clientName` a `String` compare with.\r\n* Returns `true` when the name matches and `false` when it does not.\r\n\r\n##### NOTE: When the `Client` has no associated client name, it will match _any_ Jack client.\r\n\r\n```js\r\n// Returns true:\r\nsession.createClient(/jack/i)\r\n\t.isClient('PulseAudio JACK Sink');\r\n\r\n// Returns false:\r\nsession.createClient(/jack/i)\r\n\t.isClient('system');\r\n```\r\n\r\n\r\n#### isPort(portName)\r\nCheck to see if this `Client` handles ports of the specified name.\r\n\r\n* `portName` a `String` compare with.\r\n* Returns `true` when the name matches and `false` when it does not.\r\n\r\n##### NOTE: When the `Client` has no associated port name, it will match _any_ Jack port.\r\n\r\n```js\r\n// Returns true:\r\nsession.createClient('client-1', /left|right/i)\r\n\t.isPort('left');\r\n\r\n// Returns false:\r\nsession.createClient('client-1', /left|right/i)\r\n\t.isPort('center');\r\n```\r\n\r\n\r\n#### isOffline()\r\nCheck to see if a client is currently offline.\r\n\r\n* Returns `true` when offline and `false` when online.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.isOffline();\r\n```\r\n\r\n\r\n#### isOnline()\r\nCheck to see if a client is currently online and available.\r\n\r\n* Returns `true` when online and `false` when offline.\r\n\r\n```js\r\nsession.createClient('client-1')\r\n\t.isOnline();\r\n```\r\n\r\n\r\n### Events\r\nFor complete documentation of event functions see the [EventEmitter2](https://github.com/asyncly/EventEmitter2) documentation.\r\n\r\n#### online\r\nTriggered when the client or a port belonging to the client comes online.\r\n\r\n#### offline\r\nTriggered when the client or a port belonging to the client goes offline.\r\n\r\n#### connect\r\nTriggered when a port belonging to the client is connected to another port.\r\n\r\n#### disconnect\r\nTriggered when a port belonging to the client is disconnected from another port.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}